## CombFoldinator
##
## Snakemake pipeline to fold protein sequences into pdb files
##
import os
import json
import itertools
configfile: "config/config.yml"

# What json files are there to process in our pipeline?
INPUTS=[name.replace('.json', '') for name in os.listdir("data/") if name.endswith('json')]

rule all:
  input:
    # The to be processed input files
    expand("results/data/{protein_complex}/combfold",
        protein_complex=INPUTS)


## Rules
## ------
## preprocess:                Preprocess the input JSON files.
rule preprocess:
  """When the sequences are too long to predict, cut them

  Note not yet implemented yet
  """
  input:
    "data/{protein_complex}.json"
  output:
    "results/data/{protein_complex}/{protein_complex}.json"
  shell:
    """
    cp {input} {output}
    """

rule run_internet_rules:
  """This rule completes all tasks that need internet.
  """
  input:
    "results/checkpoints/setup_cuda",
    "results/checkpoints/setup_combfold"
  output:
    touch("results/checkpoints/setup_dependencies")
  shell:
    """
    echo "set all dependencies"
    """
      

## setup_combfold:              Compile the COMBFOLD programme. 
rule setup_combfold:
  output:
    touch("results/checkpoints/setup_combfold")
  shell:
    """
    pixi run update_submodules
    echo "setting up combfold"
    cd workflow/scripts/dependencies/CombFold
    echo "We are in CombFold:"
    ls
    unset PIXI_PROJECT_MANIFEST
    pixi run make
    echo "compilation seems to have been a success!"
    ./CombinatorialAssembler/AF2trans.out --help
    """


## setup_cuda:                Use the cuda hardware for computation.
rule setup_cuda:
  output:
    touch("results/checkpoints/setup_cuda")
  script:
    "scripts/dependencies/setup-cuda.sh"

## produce_fasta:             Convert the json's to fasta inputs.
rule produce_fasta_pairs:
  """Make the fasta for larger subunit pairs
  """
  input:
    "results/data/{protein_complex}/{protein_complex}.json",
    "results/checkpoints/setup_combfold"
  output:
    directory("results/data/{protein_complex}/subunits/fasta-pairs/")
  shell:
    """
    # files={{output.files}}
    # directory=${{files%/*}}
    cd workflow/scripts/dependencies/CombFold
    unset PIXI_PROJECT_MANIFEST
    pixi run python3 scripts/prepare_fastas.py ../../../../{input[0]} \
      --stage pairs --output-fasta-folder ../../../../{output[0]} \
      --max-af-size 1800
    """

rule produce_fasta_groups:
  input:
    "results/data/{protein_complex}/{protein_complex}.json",
    "results/data/{protein_complex}/subunits/pdb-pairs",
    "results/checkpoints/setup_combfold"
  output:
    directory("results/data/{protein_complex}/subunits/fasta-groups/")
  shell:
    """
    cd workflow/scripts/dependencies/CombFold
    unset PIXI_PROJECT_MANIFEST
    pixi run python3 scripts/prepare_fastas.py ../../../../{input[0]} \
      --stage groups --output-fasta-folder ../../../../{output[0]} \
      --max-af-size 1800 \
      --input-pairs-results ../../../../{input[1]}
    """

rule collate_structures:
  input:
    "results/data/{protein_complex}/subunits/pdb-pairs",
    "results/data/{protein_complex}/subunits/pdb-groups"
  output:
    "results/data/{protein_complex}/subunits/pdb"
  shell:
    """
    mkdir {output} -p
    cp {input[0]} {output}
    cp {input[1]} {output}
    """

# rule colabfold_msa

rule colabfold_batch_pairs:
  input:
    checkpoint="results/checkpoints/setup_cuda",
    msa="results/data/{protein_complex}/subunits/fold-msa-pairs"
  params:
    number_of_models=config['colabfold']['number_of_models']
  output:
    directory("results/data/{protein_complex}/subunits/pdb-pairs/")
  shell:
    """
    echo "Starting colabfold, please see {output}/log.txt for the log"
    pixi run colabfold_batch {input.msa} {output} \
        --num-models {params.number_of_models}
    """

rule colabfold_batch_msa_pairs:
  input:
    fasta="results/data/{protein_complex}/subunits/fasta-pairs"
  output:
    directory("results/data/{protein_complex}/subunits/fold-msa-pairs/")
  params:
    number_of_models=config['colabfold']['number_of_models']
  shell:
    """
    echo "Starting colabfold, please see {output}/log.txt for the log"
    pixi run colabfold_batch --msa-only {input.fasta} {output} \
        --num-models {params.number_of_models}
    """

rule colabfold_batch_groups:
  input:
    checkpoint="results/checkpoints/setup_cuda",
    msa="results/data/{protein_complex}/subunits/fold-msa-groups"
  params:
    number_of_models=config['colabfold']['number_of_models']
  output:
    directory("results/data/{protein_complex}/subunits/pdb-groups/")
  shell:
    """
    echo "Starting colabfold, please see {output}/log.txt for the log"
    pixi run colabfold_batch {input.msa} {output} \
        --num-models {params.number_of_models}
    """

rule colabfold_batch_msa_groups:
  input:
    fasta="results/data/{protein_complex}/subunits/fasta-groups"
  output:
    directory("results/data/{protein_complex}/subunits/fold-msa-groups/")
  params:
    number_of_models=config['colabfold']['number_of_models']
  shell:
    """
    echo "Starting colabfold, please see {output}/log.txt for the log"
    pixi run colabfold_batch --msa-only {input.fasta} {output} \
        --num-models {params.number_of_models}
    """

## combfold:                  Calculate the complexes from the JSON
##                              file.
rule combfold:
  """Run the combfold programme

  Note --- If a high scoring assembly cannot be found, the programme will
            exit with a nonzero exit code. That is why the usage of 
            `set +e` is needed.
  """
  input:
    "results/checkpoints/setup_combfold",
    json="results/data/{protein_complex}/{protein_complex}.json",
    pdb="results/data/{protein_complex}/subunits/pdb"
  output:
    directory("results/data/{protein_complex}/combfold")
  shell:
    """
    set +e
    cd workflow/scripts/dependencies/CombFold
    unset PIXI_PROJECT_MANIFEST
    pixi run python3 scripts/run_on_pdbs.py ../../../../{input.json}  \
      ../../../../{input.pdb} output-{wildcards.protein_complex}
    echo "made the following files in output"
    mkdir ../../../../{output} -p
    mv output-{wildcards.protein_complex}/* ../../../../{output}
    rm output-{wildcards.protein_complex} -r
    """

## help:                      Show the help.
rule help:
  input: "workflow/Snakefile"
  shell:
      "sed -n 's/^##//p' {input}"

## version                    Show the version.
rule version:
  shell:
    """
    git describe --tags --abbrev=0
    """
    

## clean:                     Clean all outputs
rule clean:
    shell:
        "rm -rf results/data*"

## build_overview:            Print the graph.
rule build_overview:
  output:
    "results/method.{fileformat}"
  shell:
    """
    snakemake -c 1 --forceall --dag | dot -T{wildcards.fileformat} > {output}
    """
