## CombFoldinator
##
## Snakemake pipeline for the Combfold programme. Usage is 
## pixi run make <rule name>
##

# This snakemake uses checkpoints to re-evaluate the DAG after each folding
# step. This allows the colabfold prediction to run in paralel.

import os
import json
import itertools
configfile: "config/config.yml"

# What json files are there to process in our pipeline?
INPUTS=[name.replace('.json', '') for name in os.listdir("data/") if
  name.endswith('json')]

## all -- output:
##    A file with the output of the combfold programme for each of the input
##    Files in the `data` directory.
rule all:
  input:
    expand("results/data/{protein_complex}/combfold",
        protein_complex=INPUTS)

TOOL_DIR = "tools"
include: "rules/helpers.smk"
include: "rules/folding.smk"
include: "rules/CombFold.smk"

##
## Rules
## ------
##

localrules: 
  preprocess,
  run_internet_rules, 
  setup_cuda, 
  setup_combfold, 
  produce_fasta_pairs, 
  gather_pdb_pairs, 
  produce_fasta_groups, 
  gather_pdb_groups









## help:
##    Show the help.
##
rule help:
  input: "workflow/Snakefile"
  shell:
      "sed -n 's/^##//p' {input}"

## version:
##    Show the version.
##
rule version:
  shell:
    """
    git describe --tags --abbrev=0
    """
    

## clean:                     
##    Clean all outputs of the data folder.
##
rule clean:
    shell:
        "rm -rf results/data*"

## build_overview:            
##    Print the graph of the current job.
##
rule build_overview:
  conda:
    "envs/utils.yml"
  output:
    "results/method.{fileformat}"
  shell:
    """
    snakemake -c 1 --forceall --dag | dot -T{wildcards.fileformat} > {output}
    """

rule install_easy_graph:
  conda:
    "envs/utils.yml"
  output:
    touch("results/checkpoints/install_easy_graph")
  shell:
    """
    cpan -i App::cpanminus
    cpanm Graph::Easy
    """

## build_overview_ascii:
##    Prints the graph in ascii format.
rule build_ascii_graph:
  conda:
    "envs/utils.yml"
  input:
    "results/checkpoints/install_easy_graph"
  output:
    "results/method-simple.ascii"
  shell:
    """
    snakemake -c 1 --forceall --dag > out
    graph-easy --from=dot --as_ascii out >  {output}
    rm out
    """
